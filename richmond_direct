#!/usr/bin/python2
import argparse
import configparser
import datetime
import pytz
from tzlocal import get_localzone

import ptv


def time_hhmm(string):
    split = string.split(":")
    if len(split) != 2:
        raise argparse.ArgumentTypeError("time '%r' is not valid" % string)

    try:
        hh = int(split[0])
        mm = int(split[1])
    except ValueError:
        raise argparse.ArgumentTypeError("time '%r' is not valid" % string)

    try:
        time = datetime.time(hour=hh, minute=mm)
    except ValueError:
        raise argparse.ArgumentTypeError("time '%r' is not valid" % string)

    return time


def print_result(result, change_dt_utc):
    print(
        "stop:%d %d %s (%s) (RT:%s) %s (%s) (RT:%s) "
        "platform %s (platform:%s direct:%s)" % (
            result['change_stop_id'],
            result['run']['run_id'],
            result['departure_dt_local'].time(),
            result['departure_dt_utc'].replace(tzinfo=None)
            - change_dt_utc.replace(tzinfo=None),
            result['departure_is_realtime'],
            result['arrival_dt_local'].time(),
            result['arrival_dt_utc'].replace(tzinfo=None)
            - change_dt_utc.replace(tzinfo=None),
            result['arrival_is_realtime'],
            result['departure']['platform_number'],
            result['departure']['at_platform'],
            result['direct'],
        )
    )


def main():
    parser = argparse.ArgumentParser(
        description='Guesstimates connections at Richmond'
        ' station for direct service.')
    parser.add_argument(
        'departure_time',
        type=time_hhmm,
        help='Departure time for first train.')
    parser.add_argument(
        'departure_station',
        type=int,
        help='Departure station for first train.')
    args = parser.parse_args()

    # configuration
    config = configparser.ConfigParser()
    config.read('config.ini')

    ptv_section = config['ptv']
    dev_id = ptv_section.getint('dev_id')
    key = ptv_section['key']

    connection = ptv.Connection(dev_id, key)

    today = datetime.date.today()

    # our timezone
    to_zone = get_localzone()

    # service we are currently on
    departed_time = args.departure_time
    departed_dt = datetime.datetime.combine(today, departed_time)
    print(departed_dt)
    departed_stop_id = args.departure_station
    departed_route_type = 0

    # Get the direction
    directions = connection.get_directions(route_id=2)
    city_directions = filter(
        lambda d: d['direction_name'] == "City (Flinders Street)",
        directions['directions'],
    )
    assert(len(city_directions) == 1)
    direction_id = city_directions[0]['direction_id']

    # where we expect to change
    changes = [
        {
            'stop_id': 1162,
            'direct_sequence': [1162, 1071],
            'direct_time': datetime.timedelta(minutes=4),
            'loop_time': datetime.timedelta(minutes=14),
            'params': {
                'direction_id': direction_id,
            },
        },
        {
            'stop_id': 1155,
            'direct_sequence': [1155, 1071],
            'direct_time': datetime.timedelta(minutes=4),
            'loop_time': datetime.timedelta(minutes=10),
            'params': {
                'platform_numbers': 3
            },
        }
    ]

    # where we expect to finish
    destination_stop_id = 1071

    # convert time to UTC
    from_zone = get_localzone()
    departed_dt_local = from_zone.localize(departed_dt, is_dst=None)
    departed_dt_utc = departed_dt_local.astimezone(pytz.utc)

    # Get the run_id
    j = connection.get_departures(
            route_type=departed_route_type, stop_id=departed_stop_id,
            direction_id=direction_id, max_results=1, date_utc=departed_dt_utc)
    run_id = j['departures'][0]['run_id']
    print("run_id = %s" % run_id)

    # Get the initial stop departure details
    departure = j['departures'][0]
    if departure['estimated_departure_utc'] is not None:
        departure_dt_string = departure['estimated_departure_utc']
        departure_is_realtime = True
    else:
        departure_dt_string = departure['scheduled_departure_utc']
        departure_is_realtime = False

    departure_dt_utc = datetime.datetime.strptime(
        departure_dt_string, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=pytz.utc)
    departure_dt_local = departure_dt_utc.astimezone(to_zone)

    print("departure time (UTC) = %s (RT:%s)"
          % (departure_dt_utc, departure_is_realtime))
    print("departure time (local) = %s (RT:%s)"
          % (departure_dt_local, departure_is_realtime))

    # Get the stopping patterns
    first_pattern = connection.get_pattern(
        run_id=run_id,
        route_type=departed_route_type,
        date_utc=departed_dt_utc,
    )

    changes_results = {}
    runs = set()
    results = []
    for change in changes:
        change_stop_id = change['stop_id']

        # Get the change stop departure details
        # import json
        # print("looking for ", change_stop_id)
        # print(json.dumps(first_pattern['departures'], indent=4))
        departures = filter(
            lambda d: d['stop_id'] == change_stop_id,
            first_pattern['departures'],
        )
        assert len(departures) == 1

        # Get the expected arrival time at change_stop
        departure = departures[0]
        if departure['estimated_departure_utc'] is not None:
            change_dt_string = departure['estimated_departure_utc']
            change_is_realtime = True
        else:
            change_dt_string = departure['scheduled_departure_utc']
            change_is_realtime = False

        change_dt_utc = datetime.datetime.strptime(
            change_dt_string, "%Y-%m-%dT%H:%M:%SZ").replace(tzinfo=pytz.utc)
        change_dt_local = change_dt_utc.astimezone(to_zone)

        print("%d change time (UTC) = %s (RT:%s)"
              % (change_stop_id, change_dt_utc, change_is_realtime))
        print("%d change time (local) = %s (RT:%s)"
              % (change_stop_id, change_dt_local, change_is_realtime))

        changes_results[change_stop_id] = {
            'change_dt_utc': change_dt_utc,
            'change_dt_local': change_dt_local,
            'change_is_realtime': change_is_realtime,
        }

        params = change['params']

        # Look up departures after change time
        j = connection.get_departures(
                route_type=0, stop_id=change_stop_id,
                expand="run",
                max_results=10, date_utc=change_dt_utc,
                **params)

        for departure in j['departures']:
            run = j['runs'][str(departure['run_id'])]
            if departure['run_id'] in runs:
                continue
            runs.add(departure['run_id'])

            # get the departure time from change stop
            if departure['estimated_departure_utc'] is not None:
                departure_dt_string = departure['estimated_departure_utc']
                departure_is_realtime = True
            else:
                departure_dt_string = departure['scheduled_departure_utc']
                departure_is_realtime = False

            departure_dt_utc = datetime.datetime.strptime(
                departure_dt_string, "%Y-%m-%dT%H:%M:%SZ").replace(
                tzinfo=pytz.utc)
            departure_dt_local = departure_dt_utc.astimezone(to_zone)

            # skip if too early
            if departure_dt_utc < change_dt_utc:
                continue

            # get pattern for this run
            pattern = connection.get_pattern(
                departure['run_id'], route_type=0, date_utc=departure_dt_utc)

            # get the destination for this run
            if 'departures' not in pattern:
                continue
            stops = [d['stop_id'] for d in pattern['departures']]

            destinations = filter(
                lambda d: d['stop_id'] == destination_stop_id,
                pattern['departures'],
            )
            assert len(destinations) == 1
            # destination = destinations[0]

            # is this a direct service?
            direct_sequence = change['direct_sequence']
            direct = any(
                stops[a:a+len(direct_sequence)] == direct_sequence
                for a in range(len(stops))
            )

            # get the time we arrive at the destination
            # if destination['estimated_departure_utc'] is not None:
            #     arrival_dt_string = destination['estimated_departure_utc']
            #     arrival_is_realtime = True
            # else:
            #     arrival_dt_string = destination['scheduled_departure_utc']
            #     arrival_is_realtime = False
            # arrival_dt_utc = datetime.datetime.strptime(
            #     arrival_dt_string, "%Y-%m-%dT%H:%M:%SZ").replace(
            #     tzinfo=pytz.utc)
            # arrival_dt_local = arrival_dt_utc.astimezone(to_zone)

            if direct:
                arrival_dt_utc = (
                    departure_dt_utc
                    + change['direct_time']
                )
            else:
                arrival_dt_utc = (
                    departure_dt_utc
                    + change['loop_time']
                )
            arrival_dt_local = arrival_dt_utc.astimezone(to_zone)
            arrival_is_realtime = departure_is_realtime

            result = {
                'departure_dt_local': departure_dt_local,
                'departure_dt_utc': departure_dt_utc,
                'departure_is_realtime': departure_is_realtime,
                'arrival_dt_local': arrival_dt_local,
                'arrival_dt_utc': arrival_dt_utc,
                'arrival_is_realtime': arrival_is_realtime,
                'departure': departure,
                'run': run,
                'pattern': pattern,
                'direct': direct,
                'change_stop_id': change_stop_id,
            }
            print_result(result, change_dt_utc)
            results.append(result)

    print("")

    sorted_results = sorted(results, key=lambda r: r['arrival_dt_local'])
    for result in sorted_results:
        change_stop_id = result['change_stop_id']
        change_dt_utc = changes_results[change_stop_id]['change_dt_utc']
        print_result(result, change_dt_utc)


if __name__ == "__main__":
    main()
